Array -> 
        collection of same type of data 


        int a[5]; // 5 elements 

index -> subscript -> 
start 0 
end size-1 
0 1 2 3 4 
bytes -> int a[5] => 4 byte * 5 => 20 byte 
-------------------------------------------------------------------------


bubble vs selection vs insertion 

insertion sort --> 

---------------------------------------------------------------------------------------------------
                                                DS 
                Linear DS                                                       Non Linear 

                *Array                                                           Tree
                *stack                                                           Graph
                *queue
                Linked List

                sorting 
                        *bubble *selection *insertion merge quick 
                searching
                        Linear binary  

---------------------------------------------------------------------------------------------------

        
        Stack -> 
                        LIFO -> Last In First Out 

        whats app -> sms -> 
                        9 
                        9.15
                        9.20

        call logs --> 
        history --> 
        recursion --> 


---------------------------------------------------------------------------------------------------

Stack -> use -> () [][][][]   {(({}))}


stack --> character --> create a stack -> character->  push pop -> logic -> brackets -> ? 


AK 47 -> border -> 

Java --> 

stack -> character 


() -> valid 
({}) -> valid 

([][]) -> valid 

 
 

({[{}{}{}}})
---------------------------------------------------------------------------------------------------
Queue -> FiFo -> 

simple queue -> 

---------------------------------------------------------------------------------------------------

infix -> prefix 
infix -> postfix 

a+b*c-d/f 



A +  (B + C) *   D

A + B * (C ^ D   - G / H)

A + B * (C ^ D - E) ^ F + G / H --> prefix 

(A + (B - (C * (D / E ^ F)))) ^ (G + H)




---------------------------------------------------------------------------------------------------

queue ->   simple queue 
           circular queue 
           double ended queue {enQ,deQ both side}
                IRD -> input restricted DQeueu {enQ:single,deQ:both}
                ORD -> output restricted DQeueu {enQ:both,deQ:single}
           priority queue ->

---------------------------------------------------------------------------------------------------

 Linked List : DMA : dynamic list

---------------------------------------------------------------------------------------------------

function*** 
structure{task} 
pointer 
DMA 

---------------------------------------------------------------------------------------------------


int a[5]; 
//2 items -> 3 w 

structure ---> collection of diff. type of data 


struct {

};

struct student {
        char name[30];
        int m,s,e;
        float perc; 
        char grade;
};
 

 struct student s; 
 struct student x; 

 dot -> 
        s.m = 98; 
        s.s = 80;

three students 

---------------------------------------------------------------------------------------------------


pointer ===>

        int a ; //4 byte //  a value -> 10 20 30 60 
        a = 10; // any value  

        int *p; // pointer variable -> value 
        p = &a ; // memory address -> address of another variable 
         
        & -> address of 


pointer -> structure 



---------------------------------------------------------------------------------------------------

int a; // 4 byte 

//
/
/
/
/
/
/// a->4byte -> 
/
/
/
//
//
//end 





DMA -> allocate , release 


C -> 4 function DMA 

calloc()
malloc() 

free()
realloc() 

----------------------------------------------------------
stdlib.h 

calloc()  -> 
malloc()  ->

single -> block -> malloc -> 200 byte 

multiple -> n -> calloc -> 200 byte => 20,10 byte 

----------------------------------------------------------

calloc -> array 
malloc -> struct , single {int a}, 


----------------------------------------------------------


struct -> 
dot -> 
array of struct -> 



DMA-> 
        calloc() -> allocate  
        malloc() -> allocate 
        free() ->   release 
        realloc() -> resizing 

stdlib.h 

----------------------------------------------------------

pointer -> 



----------------------------------------------------------



Linked List ->
                        1) structure 
                        2) pointer 
                        3) DMA functions 
                        4) function 




----------------------------------------------------------

array -> list -> size fix -> size ? 
dynamic list-> 
                        when you required ? allocate 
                        when you dont required ? free 
self referntial structure 

----------------------------------------------------------



DMA -> allocate ->
                calloc()
                malloc()

i have allocated 50bytes and now i want to incrase 50 to 100 ?
        realloc() 


now i am done with task , and want to release all allocated memory? 
        free() 


structure ______________ ? int x ____________ ? int y[] _____________ ? 
in above data type which function is used to allocate memory? 
malloc 
malloc
calloc 

-------------------------------------------------------------------

linked list -> create -> [   ] -> ? 
node 

linked list first node -> 
head , start , first 

how many types of linked list we have ? 
list out ? 

in single circular node is divided into ____2 data,next_________ part? 


-------------------------------------------------------------------


























































