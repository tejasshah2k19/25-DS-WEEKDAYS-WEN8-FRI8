Array -> 
        collection of same type of data 


        int a[5]; // 5 elements 

index -> subscript -> 
start 0 
end size-1 
0 1 2 3 4 
bytes -> int a[5] => 4 byte * 5 => 20 byte 
-------------------------------------------------------------------------


bubble vs selection vs insertion 

insertion sort --> 

---------------------------------------------------------------------------------------------------
                                                DS 
                Linear DS                                                       Non Linear 

                *Array                                                           Tree
                *stack                                                           Graph
                queue
                Linked List

                sorting 
                        *bubble *selection *insertion merge quick 
                searching
                        Linear binary  

---------------------------------------------------------------------------------------------------

        
        Stack -> 
                        LIFO -> Last In First Out 

        whats app -> sms -> 
                        9 
                        9.15
                        9.20

        call logs --> 
        history --> 
        recursion --> 


---------------------------------------------------------------------------------------------------

Stack -> use -> () [][][][]   {(({}))}


stack --> character --> create a stack -> character->  push pop -> logic -> brackets -> ? 


AK 47 -> border -> 

Java --> 

stack -> character 


() -> valid 
({}) -> valid 

([][]) -> valid 

 
 

({[{}{}{}}})
---------------------------------------------------------------------------------------------------
Queue -> FiFo -> 

simple queue -> 

---------------------------------------------------------------------------------------------------

infix -> prefix 
infix -> postfix 

a+b*c-d/f 



A +  (B + C) *   D

A + B * (C ^ D   - G / H)

A + B * (C ^ D - E) ^ F + G / H --> prefix 

(A + (B - (C * (D / E ^ F)))) ^ (G + H)






































